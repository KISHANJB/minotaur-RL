//
//     MINOTAUR -- It's only 1/2 bull
//
//     (C)opyright 2010 - 2014 The MINOTAUR Team.
//

/**
 * \file CutPool.h
 * \brief Declare class CutPool for storing cuts.
 * \author Ashutosh Mahajan, Argonne National Laboratory
 */

#ifndef MINOTAURCUTPOOL_H
#define MINOTAURCUTPOOL_H

#include "Types.h"

namespace Minotaur {

class Environment;
class Cut;
class Problem;
class Solution;

typedef boost::shared_ptr<Environment> EnvironmentPtr;
typedef boost::shared_ptr<Cut> CutPtr;
typedef boost::shared_ptr<Problem> ProblemPtr;
typedef boost::shared_ptr<Solution> SolutionPtr;

typedef std::vector<CutPtr> CutVector;
typedef std::deque<CutPtr> CutQ;

/**
 * The CutPool class is meant to store the cutting planes generated by
 * different cut generators and handlers. 
 */
class CutPool {

public:
  /// Default constructor.
  CutPool();

  /// Constructor that loads the relaxation problem. 
  CutManager(EnvPtr env);

  /// Destroy.
  ~CutManager();

  /// Add to pool.
  void addCut(CutPtr cut);

  /// Add to pool.
  void addCuts(CutVector cuts);

  /// Find duplicate.
  CutPtr findDup(CutPtr cut);

  /// Remove a cut.
  void removeCut(CutPtr cut);

  /// Remove a cut.
  void removeCuts(CutVector cuts);

  /// Write to output.
  void write(std::ostream &out) const;

private:
  /// Environment.
  EnvPtr env_;

  /// For logging.
  LoggerPtr logger_;

  /// Globally valid cuts that are in the relaxation. 
  CutQ glAct_;

  /// Globally valid cuts that are not in the relaxation. 
  CutQ glInact_;

  /// For logging.
  const static std::string me_;
};
}
#endif

// Local Variables: 
// mode: c++ 
// eval: (c-set-style "k&r") 
// eval: (c-set-offset 'innamespace 0) 
// eval: (setq c-basic-offset 2) 
// eval: (setq fill-column 78) 
// eval: (auto-fill-mode 1) 
// eval: (setq column-number-mode 1) 
// eval: (setq indent-tabs-mode nil) 
// End:
