#!/bin/bash

#
# Without compiling any externals, fetches third-party libraries, and compiles
# minotaur with those libraries. 
#

usage () 
{
   echo ""
   echo "usage: ./build_without_externals -d build-directory 
   -M minotaur-directory [-e externals-directory] [-j num-cpus] [-l log-file]
   [-abcfiosx]"
   echo ""
   echo "-a: Do not use asl while building. Disabled by default."
   echo "-b: Enable debug."
   echo "-c: Do not use cpp-unittest while building. Disabled by default."
   echo "-C: Use curl instead of wget to fetch externals."
   echo "-d: Directory where Minotaur binaries will be build."
   echo "-e: Directory where third-party libraries and headers have already
    been downloaded. This directory should contain the third-party-0.2.1-xxx
    folder. If it does not contain this folder, then the third-party files
    will be downloaded into this directory. If the directory does not exist
    then the script will exit with error. If this option is not specified,
    the files will be downloaded inside the build-directory provided with
    \"-d\" option."
   echo "-f: Do not use filtersqp and bqpd while building. Disabled by default."
   echo "-i: Do not use ipopt while building. Disabled by default."
   echo "-j: Number of CPUs to use for compiling."
   echo "-l: Full path to log file. Default is /dev/null"
   echo "-M: Directory where Minotaur source code is available."
   echo "-O: Use Mac-OS specific compile flags."
   echo "-o: Do not use osi while building. Disabled by default."
   echo "-s: Build static libraries instead of shared."
   echo "-x: Use manual makefile to build minotaur, instead of using configure."
   echo ""
   echo -n "typical usage: ./build_without_externals"
   echo -n " -d ./build -M . -j 8 -b"
   echo ""
   echo -n "typical usage on Mac: ./build_without_externals"
   echo -n " -d ./build -M . -j 8 -b -C -O -s"
   echo ""
}

USE_ASL=1
USE_CPPUNIT=1
USE_FILTERSQP=1
USE_BQPD=1
USE_IPOPT=1
USE_OSI=1
USE_CURL=0
USE_MAC=0

ASL="asl-20161228"
CPPUNIT="cppunit-1.13.2"
OSI="clp-1.16.9"
IPOPT="ipopt-3.12.7"
FILTERSQP="filter-102"
BQPD="bqpd-3"

LOG=
ERR=
CPUS=1
ENABLE_STATIC=0
ENABLE_DEBUG=0
CONFIG_MINO=1

UMINOTAUR=
UDEST=
UEDEST=

#TODO: Arch and OS specific flags
TARNAME="third-party-0.2.1-linux-x86_64"
TARURL=http://www.mcs.anl.gov/research/projects/minotaur/dist/${TARNAME}.tar.gz

## read arguments
while getopts "abcCd:e:fij:l:M:oOr:sx" flag
do
  case ${flag} in
    a) USE_ASL=0 ;;
    b) ENABLE_DEBUG=1 ;;
    c) USE_CPPUNIT=0 ;;
    C) USE_CURL=1  ;;
    d) UDEST=${OPTARG} ;;
    e) UEDEST=${OPTARG} ;;
    f) USE_FILTERSQP=0 ;;
    i) USE_IPOPT=0 ;;
    j) CPUS=${OPTARG} ;;
    l) LOG=${OPTARG} ;;
    M) UMINOTAUR=${OPTARG} ;;
    o) USE_OSI=0 ;;
    O) USE_MAC=1  ;;
    r) ERR=${OPTARG} ;;
    s) ENABLE_STATIC=1 ;;
    x) CONFIG_MINO=0 ;;
    *) echo "invalid option ${flag}"; usage; exit 1;;
  esac
done

## TODO: make this work for bqpd alone.
USE_BQPD=$USE_FILTERSQP

## set log
if [ "x${LOG}" != "x" ]
then
  exec 1>>${LOG}
fi
if [ "x${ERR}" != "x" ]
then
  exec 2>>${ERR}
fi

## check arguments
if [ "x${UDEST}" == "x" ]
then
  echo>&2 ""
  echo>&2 "error! the directory where minotaur is to be built must be provided"
  usage
  exit 1
fi

if [ -e ${UDEST} ]
then
  echo>&2 ""
  echo>&2 "error! the directory ${UDEST} already exists. remove it or provide another path."
  echo>&2 ""
  exit 1
fi


if [ "x${UMINOTAUR}" == "x" ]
then
  echo>&2 ""
  echo>&2 "error! the directory where minotaur src is located must be provided"
  echo>&2 ""
  usage
  exit 1
fi

if [ "${USE_CURL}" == "1" ]
then
  echo "will use curl instead of wget to fetch externals."
  BUILD_ARGS="${BUILD_ARGS} -C"
fi


if [ "${USE_MAC}" == "1" ]
then
  echo "will use mac specific flags for compiling externals."
  BUILD_ARGS="${BUILD_ARGS} -O"
fi

if [ "${ENABLE_STATIC}" == "1" ]
then
  echo "will use static flags for compiling externals."
  BUILD_ARGS="${BUILD_ARGS} -s"
fi

if [ "${USE_IPOPT}" == "0" ]
then
  echo "will disable ipopt."
  BUILD_ARGS="${BUILD_ARGS} -i"
fi

MINOTAUR=`cd ${UMINOTAUR}; pwd`

if [ ! -e ${MINOTAUR}/src/base/MinotaurConfig.h.cmake ]
then
  echo>&2 ""
  echo>&2 "Minotaur src is not located in the specified directory ${MINOTAUR}"
  echo>&2 ""
  usage
  exit 1
fi

mkdir ${UDEST}
DEST=`cd ${UDEST}; pwd`

echo "Minotaur src directory is ${MINOTAUR}"
echo "Minotaur will be built in ${DEST}"

EDEST=
GET_EXTERNALS=0
if [ "x${UEDEST}" == "x" ]
then
  EDEST=${DEST}
  GET_EXTERNALS=1
  echo ""
  echo "No directory specified for external dependencies. Setting it to ${EDEST}."
  cd ${EDEST}
elif [ -d ${UEDEST} ]
then
  cd ${UEDEST}
  EDEST=`pwd`
  if [ -d ${TARNAME} ]
  then
    echo "Using third-party files already available in ${EDEST}"
  else
    GET_EXTERNALS=1
    echo "Fetching and unpacking externals in ${EDEST}"
  fi
else
    echo "directory ${UEDEST} does not seem to exist"
    exit 1
fi

if (( ${GET_EXTERNALS} == 1 ))
then
  if [ "${USE_CURL}" == "1" ]
  then
    curl -o ${TARNAME}.tar.gz ${TARURL}
  else
    wget -N ${TARURL}
  fi
  echo -n "extracting third-party libraries and headers ... "
  tar -zxf ${TARNAME}.tar.gz
fi

tmp=${EDEST}
EDEST=${tmp}/${TARNAME}

if (( ${CONFIG_MINO}==1 ))
then
  ## prepare the configure arguments
  CARGS="-DBOOST_INC_DIR:PATH=${EDEST}/include "

  if (( ${USE_ASL}==1 ))
  then
    CARGS+=" -DASL_LIB_DIR:PATH=${EDEST}/lib" 
    CARGS+=" -DASL_INC_DIR:PATH=${EDEST}/include" 
  fi
  if (( ${USE_BQPD}==1 ))
  then
    CARGS+=" -DBQPD_LIB_DIR:PATH=${EDEST}/lib"  
  fi
  if (( ${USE_FILTERSQP}==1 ))
  then
    CARGS+=" -DFILTER_LIB_DIR:PATH=${EDEST}/lib"  
  fi
  if (( ${USE_IPOPT}==1 ))
  then
    CARGS+=" -DIPOPT_INC_DIR:PATH=${EDEST}/include/"
    CARGS+=" -DIPOPT_LIB_DIR:PATH=${EDEST}/lib/"
  fi
  if (( ${USE_OSI}==1 ))
  then
    CARGS+=" -DOSI_INC_DIR:PATH=${EDEST}/include/"
    CARGS+=" -DOSI_LIB_DIR:PATH=${EDEST}/lib/"
    CARGS+=" -DOSICLP:BOOL=ON"
  fi
  if (( ${USE_CPPUNIT}==1 ))
  then
    CARGS+=" -DCPPUNIT_INC_DIR:PATH=${EDEST}/include/"
    CARGS+=" -DCPPUNIT_LIB_DIR:PATH=${EDEST}/lib" 
  fi
  if (( ${ENABLE_DEBUG}==1 ))
  then 
    CARGS+=" -DCMAKE_BUILD_TYPE:String=Debug" 
    ##CARGS+=" --enable-debug"
    ##else
    ##CARGS+=" --enable-debug=no"
  fi
  if (( ${ENABLE_STATIC}==1 ))
  then 
    CARGS+=" -DBUILD_SHARED_LIBS:BOOL=0"
    ##CARGS+=" --enable-static --disable-shared"
  else
    CARGS+=" -DBUILD_SHARED_LIBS:BOOL=1"
  fi

  echo "all arguments: ${CARGS}"
  ## build it.
  cd ${DEST}
  cmake ${CARGS} ${MINOTAUR}
  make -j ${CPUS} install
  if [ -e bin/bnb ]
  then
    echo "Minotaur built in ${DEST}"
  else
    echo "Minotaur not built in ${DEST}"
  fi
else
  cd ${DEST}
  cp ${MINOTAUR}/Makefile.manual Makefile
  make -j ${CPUS} BQPD_LIB=${EDEST}/lib/libbqpd.a FILTERSQP_LIB=${EDEST}/lib/libfiltersqp.a IPOPT_INST=${EDEST} OSI_INST=${EDEST} AMPL_INST=${EDEST}/lib BOOST_INC=${EDEST} MINOTAUR=${MINOTAUR} EXTRA_LIBS="-lcoinmumps -lz -lbz2"
  if [ -e bin/bnb ]
  then
    echo "Minotaur built in ${DEST}"
  else
    echo "Minotaur not built in ${DEST}"
  fi
fi

