#!/bin/bash

#
# Fetches externals and compiles externals.
#

usage () 
{
   echo ""
   echo "usage: ./build_externals -d /path/to/directory [-j {num-cpus}] [-l {log-file}] [-r {error-file}] [-COns]"
   echo ""
   echo "-C: Use curl instead of wget to fetch externals."
   echo "-d: Externals will be downloaded and built in this directory. If
    this directory already exists, the script complains and stops."
   echo "-i: Do not build ipopt."
   echo "-j: Number of CPUs to use for compiling."
   echo "-l: Full path to log file. Default is stdout."
   echo "-n: Do not clean object files etc. after compiling the
    externals."
   echo "-O: Use Mac-OS specific compile flags."
   echo "-r: Full path to error file. Default is stderr."
   echo "-s: Build static libraries."
   echo "-t: URL of minotaur-externals.tar.gz"
   echo ""
   echo -n "typical usage: ./build_with_externals"
   echo -n " -d ./"
   echo -n " -j 8"
   echo ""
}

TARNAME="minotaur-externals"
TARURL=http://www.mcs.anl.gov/~mahajan/minotaur/restricted/${TARNAME}.tar.gz
ASL="asl-20120126"
OSI="clp-1.14.6"
CPPUNIT="cppunit-1.12.1"
FILTERSQP="filter-87"
IPOPT="ipopt-3.10.2"
LOG=
ERR=
CPUS=1

## read arguments
## we use getopts instead of getopt because the former is portable. Latter
## supports long options but is not portable.

UDEST=
CLEAN=1
ENABLE_STATIC=0
STATIC_ARGS=
USE_CURL=0
USE_MAC=0
MAC_ARGS=
while getopts "Cd:ij:l:nOr:st:" flag
do
  case ${flag} in
    C) USE_CURL=1 ;;
    d) UDEST=${OPTARG} ;;
    i) IPOPT= ;;
    j) CPUS=${OPTARG} ;;
    l) LOG=${OPTARG} ;;
    n) CLEAN=0 ;;
    O) USE_MAC=1 ;;
    r) ERR=${OPTARG} ;;
    s) ENABLE_STATIC=1 ;;
    t) TARURL=${OPTARG} ;;
    *) echo>&2 "invalid option ${flag}"; usage; exit 1;;
  esac
done

if [ "x${LOG}" != "x" ]
then
  exec 1>>${LOG}
fi
if [ "x${ERR}" != "x" ]
then
  exec 2>>${ERR}
fi

## check arguments
if [ "x${UDEST}" == "x" ]
then
  echo>&2 ""
  echo>&2 "error! the directory where minotaur is to be built must be provided"
  echo>&2 ""
  usage
  exit 1
fi


if [ "${ENABLE_STATIC}" == "1" ]
then
  STATIC_ARGS="--disable-shared --enable-static"
fi


if [ "${USE_MAC}" == "1" ]
then
  MAC_ARGS="ADD_FFLAGS=-mmacosx-version-min=10.4"
fi
  

mkdir -p ${UDEST}
DEST=`cd ${UDEST}; pwd`


echo Externals will be built in ${DEST}.

cd ${DEST}
if [ "${USE_CURL}" == "1" ]
then
  curl -o ${TARNAME}.tar.gz ${TARURL}
else
  wget -N ${TARURL}
fi

echo -n "extracting externals ... "
tar -zxf ${TARNAME}.tar.gz
echo "done."

echo "compiling OSI"
cd minotaur-externals/${OSI}
mkdir -p build  
cd build  
../configure --without-DyLP --without-Vol ${STATIC_ARGS} ${MAC_ARGS}
make -j ${CPUS} install 
cd ${DEST}

if [ "x${IPOPT}" == "x" ]
then
  echo "not compiling IPOPT"
else
  echo "compiling IPOPT"
  cd minotaur-externals/${IPOPT}
  mkdir -p build  
  cd build  
  ../configure ${STATIC_ARGS} ${MAC_ARGS}
  make -j ${CPUS} install
fi
cd ${DEST}

echo "compiling Filter-SQP"
cd minotaur-externals/${FILTERSQP}/src
if [ "x${STATIC_ARGS}" == "x" ]
then
  make -j ${CPUS} FFLAGS="-O3 -fPIC"
else
  make -j ${CPUS} 
fi
cd ${DEST}

echo "compiling ASL"
cd minotaur-externals/${ASL}
chmod a+rx configurehere  
./configurehere
make -j ${CPUS}
cd ${DEST}

echo "compiling CPPUNIT"
cd minotaur-externals/${CPPUNIT}
mkdir -p build  
cd build  
mkdir -p tmp
cd tmp
../../configure --prefix=${DEST}/minotaur-externals/${CPPUNIT}/build --enable-doxygen=no ${STATIC_ARGS}
make -j ${CPUS} install
cd ${DEST}

if (( CLEAN==1 ))
then
  echo "cleaning unused files in OSI"
  cd minotaur-externals/${OSI}/build
  make distclean
  cd ${DEST}

  echo "cleaning unused files in IPOPT"
  cd minotaur-externals/${IPOPT}/build
  make distclean
  cd ${DEST}

  echo "cleaning unused files in Filter-SQP"
  cd minotaur-externals/${FILTERSQP}
  rm -fv *.o src/*.o
  cd ${DEST}

  echo "cleaning unused files in CPPUNIT"
  cd minotaur-externals/${CPPUNIT}/build/tmp
  make distclean 
  cd ${DEST}
fi

